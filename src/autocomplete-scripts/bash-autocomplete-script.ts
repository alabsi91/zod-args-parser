import { transformOptionToArg } from "../parser/parse/parser-helpers.js";

import type { Cli, Subcommand } from "../types.js";

/**
 * - Generate bash autocomplete script for your CLI
 * - The generated script should be added to your `.bash_profile` or `.bashrc` file:
 *
 *   - Run: `nano $HOME/.bash_profile` or `nano $HOME/.bashrc`
 *   - Add the following line: `source <generated script path>`
 *   - Save and reopen bash to take effect
 */
export function generateBashAutocompleteScript(...params: [Cli, ...Subcommand[]]): string {
  const [cli, ...subcommands] = params;

  type MappedCommands = Record<string, { options: string[]; aliases: string[] }>;

  const mappedCommands = subcommands.reduce((acc: MappedCommands, subcommand) => {
    acc[subcommand.name] = {
      options: subcommand.options?.map(option => transformOptionToArg(option.name)) ?? [],
      aliases: subcommand.aliases ?? [],
    };
    return acc;
  }, {});

  let switchCase = "";
  for (const [key, { options, aliases }] of Object.entries(mappedCommands)) {
    switchCase += `    ${key}${aliases.length ? "|" : ""}${aliases.join("|")})\n`;
    switchCase += `      opts="${options.join(" ")}"\n`;
    switchCase += "      ;;\n";
  }

  if (cli.options?.length) {
    switchCase += `    "-"*)\n`;
    switchCase += `      opts="${cli.options.map(option => transformOptionToArg(option.name)).join(" ")}"\n`;
    switchCase += "      ;;\n";
  }

  return `# Auto-generated by zod-args-parser

_${cli.cliName}_autocomplete() {
  local cur prev commands opts subcommand used_opts filtered_opts

  cur="\${COMP_WORDS[COMP_CWORD]}"
  prev="\${COMP_WORDS[COMP_CWORD-1]}"
  subcommand="\${COMP_WORDS[1]}"

  commands="${Object.keys(mappedCommands).join(" ")}"

  case "$subcommand" in
${switchCase}
  esac

  used_opts=""
  if [[ " \${commands[@]} " =~ " $subcommand " ]]; then
    for word in "\${COMP_WORDS[@]:2}"; do
      if [[ "$word" =~ ^- ]]; then
        used_opts+=" $word"
      fi
    done
  fi

  if [[ -n "$opts" ]]; then
    filtered_opts=""
    for opt in $opts; do
      if [[ ! " $used_opts " =~ " $opt " ]]; then
        filtered_opts+="$opt "
      fi
    done
    COMPREPLY=( $(compgen -W "$filtered_opts" -- "$cur") )
    return
  fi

  if [[ "\${COMP_CWORD}" -eq 1 ]]; then
    COMPREPLY=( $(compgen -W "$commands" -- "$cur") )
  fi
}

complete -F _${cli.cliName}_autocomplete ${cli.cliName}
`;
}
