import { transformOptionToArg } from "../utils.js";

import type { Cli, Option, Subcommand } from "../types.js";

/**
 * - Generates a ZSH autocomplete script for your CLI.
 * - The generated script should be added to your `~/.zshrc` or `~/.zsh_profile` file:
 *
 *   - Run: `nano $HOME/.zshrc` or `nano $HOME/.zsh_profile`
 *   - Add the following line: `source <generated script path>`
 *   - Save and reopen zsh to take effect
 */
export function generateZshAutocompleteScript(...params: [Cli, ...Subcommand[]]): string {
  const [cli, ...subcommands] = params;

  const genArguments = (options: Option[]) => {
    return options
      ?.map(option => `'${transformOptionToArg(option.name)}[${option.description ?? ""}]'`)
      .join(" \\\n            ");
  };

  const genSubCommand = (subcommand: Subcommand) => {
    const options = subcommand.options;
    if (!options || options.length === 0) return "";
    return `${subcommand.name})
          _arguments \\
            ${genArguments(options)} \\
            '*: :_files' \\
            && ret=0
          ;;`;
  };

  return `# Auto-generated by zod-args-parser

_${cli.cliName}_autocomplete() {
  local ret=1

  _arguments -C \\
    '1: :_${cli.cliName}_commands' \\
    '*:: :->subcmds' \\
    && ret=0

  case $state in
    subcmds)
      case "$words[1]" in
        ${subcommands.map(genSubCommand).filter(Boolean).join("\n        ")}
        *)
          _arguments \\
            '*: :_files' \\
            && ret=0
          ;;
      esac
      ;;
  esac

  return $ret
}
  
_${cli.cliName}_commands() {
  local -a commands=(
    ${subcommands.map(subcommand => `"${subcommand.name}:${subcommand.description ?? ""}"`).join("\n    ")}
  )

  _describe -t subcommands 'subcommand' commands
}

compdef _${cli.cliName}_autocomplete ${cli.cliName}
`;
}
