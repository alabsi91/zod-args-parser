import { getCliMetadata } from "../metadata/get-cli-metadata.js";

import type { ArgumentMetadata, OptionMetadata, SubcommandMetadata } from "../metadata/metadata-types.js";
import type { Cli, Subcommand } from "../types.js";

export function generateMarkdown(...params: [Cli, ...Subcommand[]]): string {
  const metadata = getCliMetadata(params);

  let md = "<!-- Auto-generated by zod-args-parser -->\n\n";

  // Title
  md += `# ${metadata.name}\n\n`;

  // Description
  if (metadata.description) {
    md += `${metadata.description}\n`;
  }

  // Examples
  if (metadata.example) {
    md += renderExamples(metadata.example);
  }

  // Options
  if (metadata.options.length) {
    md += "\n## Options:\n\n";
    md += renderOptions(metadata.options, 3);
  }

  // Arguments
  if (metadata.arguments.length) {
    md += "\n## Arguments:\n\n";
    md += renderArguments(metadata.arguments, 3);
  }

  // Subcommands
  if (metadata.subcommands.length) {
    md += "\n## Subcommands:\n\n";
    md += renderSubcommands(metadata.subcommands);
  }

  return md;
}

function renderExamples(examples: string, list = false) {
  let outStr = "";

  const lang = "bash";

  const listIndent = " ".repeat(list ? 2 : 0);

  outStr += "\n" + (list ? "- " : "");

  outStr += "```" + lang + "\n";
  outStr += listIndent + examples.replace(/\n/g, "\n" + listIndent);
  outStr += "\n" + listIndent + "```\n";

  return outStr;
}

function renderOptions(optionsMetadata: OptionMetadata[] = [], h: number) {
  let outStr = "";

  for (let i = 0; i < optionsMetadata.length; i++) {
    const metadata = optionsMetadata[i];

    const aliases = [metadata.nameAsArg].concat(metadata.aliasesAsArgs).join(", ");

    const placeholder = metadata.placeholder && ` ${metadata.placeholder}`;

    outStr += `${"#".repeat(h)} \`${aliases + placeholder}\``;

    if (metadata.optional) {
      outStr += " **[optional]**";
    }

    outStr += "\n\n";

    if (metadata.description) {
      outStr += `- ${metadata.description}\n`;
    }

    if (typeof metadata.defaultValue !== "undefined") {
      outStr += `- **default:** \`${metadata.defaultValueAsString}\`\n`;
    }

    if (metadata.example) {
      outStr += renderExamples(metadata.example, true);
    }

    if (i < optionsMetadata.length - 1) {
      outStr += "\n";
    }
  }

  return outStr;
}

function renderArguments(argsMetadata: ArgumentMetadata[] = [], h: number) {
  let outStr = "";

  for (let i = 0; i < argsMetadata.length; i++) {
    const metadata = argsMetadata[i];

    outStr += `${"#".repeat(h)} \`${metadata.name}\``;

    if (metadata.optional) {
      outStr += " **[optional]**";
    }

    outStr += "\n\n";

    if (metadata.description) {
      outStr += `- ${metadata.description}\n`;
    }

    if (typeof metadata.defaultValue !== "undefined") {
      outStr += `- **default:** \`${metadata.defaultValueAsString}\`\n`;
    }

    if (metadata.example) {
      outStr += renderExamples(metadata.example);
    }

    if (i < argsMetadata.length - 1) {
      outStr += "\n";
    }
  }

  return outStr;
}

function renderSubcommands(subcommandsMetadata: SubcommandMetadata[]) {
  let outStr = "";

  for (let i = 0; i < subcommandsMetadata.length; i++) {
    const metadata = subcommandsMetadata[i];

    const aliases = [metadata.name].concat(metadata.aliases).join(", ");

    const placeholder = metadata.placeholder && ` ${escapeTags(metadata.placeholder)}`;

    outStr += `### ${aliases + placeholder}\n\n`;

    if (metadata.description) {
      outStr += `${metadata.description}\n`;
    }

    if (metadata.example) {
      outStr += renderExamples(metadata.example);
    }

    if (metadata.options.length) {
      outStr += "\n#### Options:\n\n";
      outStr += renderOptions(metadata.options, 4);
    }

    if (metadata.arguments.length) {
      outStr += "\n#### Arguments:\n\n";
      outStr += renderArguments(metadata.arguments, 4);
    }

    if (i < subcommandsMetadata.length - 1) {
      outStr += "\n---\n\n";
    }
  }

  return outStr;
}

function escapeTags(str: string) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
